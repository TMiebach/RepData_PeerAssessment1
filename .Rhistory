dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
taply(x, newClust, mean)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
ponts(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, center = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
setwd("~/GitHub/RepData_PeerAssessment1")
getwd()
dir()
?unzip
unzip("activity.zip")
dir()
?read.csv
read.csv("activity.csv")
data <- read.csv("activity.csv", header = TRUE)
str(data)
names(data)
class(data)
sapply(data, class)
is.na(data$steps)
temp <- is.na(data$steps)
sum(temp)
names(data)
temp <- is.na(data$interval)
sum9temp)
sum(temp)
temp <- is.na(data$steps)
sum(temp)
temp <- is.na(data$date)
sum(temp)
str(data)
?mean
mean(data$steps)
mean(data$steps, ne.rm = TRUE)
mean(data$steps, na.rm = TRUE)
hist(data$steps)
as.date?
?as.date
?as.Date
data$date <- as.Date(data$date)
str(data)
?read.csv
data <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"))
str(data)
data$date
data <- read.csv("activity.csv", header = TRUE, quote = "\""", colClasses = c("integer", "Date", "integer"))
data <- read.csv("activity.csv", header = TRUE, quote = "\\""", colClasses = c("integer", "Date", "integer"))
data <- read.csv("activity.csv", header = TRUE, quote = "\\"", colClasses = c("integer", "Date", "integer"))
data <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"), stringsAsFactors = FALSE)
str(data)
data$date
data <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"), stringsAsFactors = TRUE)
str(data)
data <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"), quote = "")
data <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"), quote = "")
data <- read.csv("activity.csv", header = TRUE)
data$date <- as.Date(data$date)
str(data)
data$date
data <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"))
str(data)
temp <- unique(data$date)
temp
lenght(temp)
length(temp)
lenght(unique(data$date))
length(unique(data$date))
summary(data)
names(data)
length(data)
str(data)
nrows(data)
length(data)
dim(data)
test <- dim(data)
test
str(test)
library(plyr)
library(dplyr)
?group_by
group_by(data, date)
?summarize
?summarise
summarise(data$steps, sum)
summarise(data$steps)
summarise(data)
summarize(group_by(data, date))
summarize(sum(data$steps, group_by(data, date))
)
summarize(sum(data$steps), group_by(data, date))
summarize(data, group_by(date))
group_by(data, date)
group_by(data, date) %>% summarise(sum(data$steps))
?sum
group_by(data, date) %>% summarise(sum(data$steps, na.rm = TRUE))
test <- group_by(data, date) %>% summarise(sum(data$steps, na.rm = TRUE))
test
str(test)
?group_by
test <- group_by(data, date) %>% summarise(sum(data$steps, na.rm = TRUE))
test[,2]
hesd(test)
head(test)
tail(test)
sum(data$steps)
sum(data$steps, na.rm = TRUE)
?summarise
test <- group_by(data, date) %>% summarise(sum = sum(data$steps, na.rm = TRUE))
test
data %>% group_by(date) %>% summarise(sum = sum(data$steps, na.rm = TRUE))
data %>% group_by(date) %>% summarise(sum = sum(steps, na.rm = TRUE))
test <- data %>% group_by(date) %>% summarise(sum = sum(steps, na.rm = TRUE))
str(test)
hist(test)
hist(test$sum)
hist(test$sum, bin = 2)
?hist
test <- data %>% group_by(date) %>% summarise(sum_steps = sum(steps, na.rm = TRUE))
str(test)
library(ggplot2)
test <- data %>% group_by(date) %>% summarise(step_sum = sum(steps, na.rm = TRUE))
qplot(steps_sum, data = temp)
qplot(steps_sum, data = test)
test
test <- data %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
qplot(steps_sum, data = test)
qplot(steps_sum, data = test, bin = 20)
qplot(steps_sum, data = test, bin = 10)
qplot(steps_sum, data = test, bins = 20)
qplot(steps_sum, data = test, bins = 10)
qplot(steps_sum, data = test, bins = 20)
qplot(steps_sum, data = test, bins = 30)
mean(steps_by_day)
steps_by_day <- data %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
mean(steps_by_day$steps_sum)
median(steps_by_day$steps_sum)
?table
table(steps_by_day)
?labs
?xlabs
qplot(steps_sum, data = steps_by_day, bins = 30)
+ xlab("Total Steps Per Day")
+ ylab("Frequency")
+ ggtitle("Histogram of Total Number of Steps Taken Per Day")
xlab(test)
qplot(steps_sum, data = steps_by_day, bins = 30) + xlab("Total Steps Per Day")
g <- ggplot(steps_by_day, steps_sum, bins = 30)
?ggplot
g <- ggplot(steps_by_day, aes(steps_sum), bins = 30)
g
g + geom_histogram()
unique(data$interval)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
steps_average_by_interval <- data %>% group_by(interval) %>% summarise(steps_average = mean(steps, na.rm = TRUE))
str(steps_average_by_interval)
24*60
1440/5
g <- ggplot(steps_average, aes(steps_average, interval))
g <- ggplot(steps_average_by_interval, aes(steps_average, interval))
g + geom_line()
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g + geom_line()
?plot
plot(steps_average_by_interval$interval, steps_average_by_interval$steps_average, type = "l")
g + geom_line()
range(steps_average_by_interval)
range(steps_average_by_interval)
range(steps_average_by_interval$steps_average)
?which.max
which.max
which.max(steps_average_by_interval$steps_average)
steps_average_by_interval[104,]
steps_average_by_interval[which.max(steps_average_by_interval$steps_average),]
steps_max <- steps_average_by_interval[which.max(steps_average_by_interval$steps_average),]
steps_max
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g + geom_line() + xlab("Time (5 min interval)") + ylab("Average Steps") + ggtitle("Average Number of Steps During the Day")
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g + geom_line() + xlab("Time (5 min interval)") + ylab("Average Steps") + ggtitle("Average Number of Steps During the Day")
data$interval
?integer
steps_mean <- as.integer(mean(steps_by_day$steps_sum))
steps_mean
steps_max <- as.integer(steps_average_by_interval[which.max(steps_average_by_interval$steps_average),])
steps_max
steps_mean <- round(mean(steps_by_day$steps_sum), digits = 0)
steps_mean
data
288*2
data[289:576,]
288*3
data[577:864,]
is.na(data$steps)
missing <- is.na(data$steps)
data[missing,]
temp <- data[missing,]
names(temp)
unique(temp$date)
length(unique(temp$date))
length(temp)
str(temp)
8*288
?data
mydata_missing <- mydata[is.na(mydata$steps),]
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Unzip data file (if necessary) and read data
if(!file.exists("activity.csv")){
unzip("activity.zip")
}
mydata <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"))
# Calculate and assign variables for in-line text computational output
variable_names <- names(mydata)
mydata_frame_dimensions <- dim(mydata)
n_missing <- sum(is.na(mydata$steps))
n_unique_days <- length(unique(mydata$date))
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum), digits = 0)
steps_median <- median(steps_by_day$steps_sum)
# calulate the average number of steps for each unique timeinterval
steps_average_by_interval <- mydata %>% group_by(interval) %>% summarise(steps_average = mean(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g + geom_line() + xlab("Time (5 min interval identifier)") + ylab("Average Steps") + ggtitle("Average Number of Steps During the Day")
# Determine interval of highest average step count
# Round average step count to nearest whole step
steps_max <- round(steps_average_by_interval[which.max(steps_average_by_interval$steps_average),], digits = 0)
data_missing <- mydata[is.na(mydata$steps),]
str(data_missing)
unique(data_missing$date)
length(unique(data_missing$date))
dates_missing <- unique(data_missing$date)
dates_missing
mydata$date == data_missing[1]
mydata$date == dates_missing[1]
mydata[mydata$date == dates_missing[1],]
mydata[mydata$date == dates_missing,]
mydata[mydata$date == dates_missing[2],]
mydata[mydata$date == dates_missing[3],]
mydata[mydata$date == dates_missing[4],]
mydata[mydata$date == dates_missing[5],]
mydata[mydata$date == dates_missing[5],]
mydata[mydata$date == dates_missing[6],]
is.na(mydata$steps) & mydata$date == dates_missing[1]
temp <- is.na(mydata$steps) & mydata$date == dates_missing[1]
sum(temp)
temp <- is.na(mydata$steps) & mydata$date == dates_missing[2]
sum(temp)
temp <- is.na(mydata$steps) & mydata$date == dates_missing[3]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[3]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[2]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[1]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[4)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[4]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[5]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[6]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[7]
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[8]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[7]
sum(temp)
temp <- !is.na(mydata$steps) & mydata$date == dates_missing[8]
sum(temp)
mydata$steps[is.na(mydata$steps)] <- 0
temp <- is.na(mydata$steps)
sum(temp)
mydata$steps
mydata$steps[is.na(mydata$steps)] <- steps_mean
head(mydata_filled)
# recalulate total number of steps for each unique day with filled data
steps_by_day_filled <- mydata_filled%>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
mydata_filled <- mydata
mydata$steps_filled[is.na(mydata$steps)] <- steps_mean
# recalulate total number of steps for each unique day with filled data
steps_by_day_filled <- mydata_filled%>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day_filled, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median with filled data
# Round mean step count to nearest whole step
steps_mean_filled <- round(mean(steps_by_day_filled$steps_sum), digits = 0)
steps_median_filled <- median(steps_by_day_filled$steps_sum)
steps_mean_filled
steps_median_filled
head(mydata_filled)
head(mydata)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Unzip data file (if necessary) and read data
if(!file.exists("activity.csv")){
unzip("activity.zip")
}
mydata <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"))
# Calculate and assign variables for in-line text computational output
variable_names <- names(mydata)
mydata_frame_dimensions <- dim(mydata)
n_missing <- sum(is.na(mydata$steps))
n_unique_days <- length(unique(mydata$date))
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum), digits = 0)
steps_median <- median(steps_by_day$steps_sum)
# calulate the average number of steps for each unique time interval
steps_average_by_interval <- mydata %>% group_by(interval) %>% summarise(steps_average = mean(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g + geom_line() + xlab("Time (5 min interval identifier)") + ylab("Average Steps") + ggtitle("Average Number of Steps During the Day")
# Determine interval of highest average step count
# Round average step count to nearest whole step
steps_max <- round(steps_average_by_interval[which.max(steps_average_by_interval$steps_average),], digits = 0)
data_missing <- mydata[is.na(mydata$steps),]
n_dates_missing <- length(unique(data_missing$date))
# Copy mydata to mydata_filled
mydata_filled <- mydata
# Replace "NA" with previously calculated mean value
mydata$steps_filled[is.na(mydata$steps)] <- steps_mean
# recalulate total number of steps for each unique day with filled data
steps_by_day_filled <- mydata_filled%>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day_filled, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median with filled data
# Round mean step count to nearest whole step
steps_mean_filled <- round(mean(steps_by_day_filled$steps_sum), digits = 0)
steps_median_filled <- median(steps_by_day_filled$steps_sum)
head(mydata)
head(mydata_filled)
# Copy mydata to mydata_filled
mydata_filled <- mydata
# Replace "NA" with previously calculated mean value
mydata_filled$steps[is.na(mydata$steps)] <- steps_mean
head(mydata)
head(mydata_filled)
# recalulate total number of steps for each unique day with filled data
steps_by_day_filled <- mydata_filled%>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day_filled, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median with filled data
# Round mean step count to nearest whole step
steps_mean_filled <- round(mean(steps_by_day_filled$steps_sum), digits = 0)
steps_median_filled <- median(steps_by_day_filled$steps_sum)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
# Unzip data file (if necessary) and read data
if(!file.exists("activity.csv")){
unzip("activity.zip")
}
mydata <- read.csv("activity.csv", header = TRUE, colClasses = c("integer", "Date", "integer"))
# Calculate and assign variables for in-line text computational output
variable_names <- names(mydata)
mydata_frame_dimensions <- dim(mydata)
n_missing <- sum(is.na(mydata$steps))
n_unique_days <- length(unique(mydata$date))
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum), digits = 0)
steps_median <- median(steps_by_day$steps_sum)
# calulate the average number of steps for each unique time interval
steps_average_by_interval <- mydata %>% group_by(interval) %>% summarise(steps_average = mean(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_average_by_interval, aes(interval, steps_average))
g + geom_line() + xlab("Time (5 min interval identifier)") + ylab("Average Steps") + ggtitle("Average Number of Steps During the Day")
# Determine interval of highest average step count
# Round average step count to nearest whole step
steps_max <- round(steps_average_by_interval[which.max(steps_average_by_interval$steps_average),], digits = 0)
data_missing <- mydata[is.na(mydata$steps),]
n_dates_missing <- length(unique(data_missing$date))
head(mydata)
n_dates_missing
# Copy mydata to mydata_filled
mydata_filled <- mydata
# Replace "NA" with previously calculated mean value
mydata_filled$steps[is.na(mydata$steps)] <- steps_mean
head(mydata_filled)
# recalulate total number of steps for each unique day with filled data
steps_by_day_filled <- mydata_filled %>% group_by(date) %>% summarise(steps_sum_filled = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day_filled, aes(steps_sum_filled))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median with filled data
# Round mean step count to nearest whole step
steps_mean_filled <- round(mean(steps_by_day_filled$steps_sum), digits = 0)
steps_median_filled <- median(steps_by_day_filled$steps_sum)
str(steps_by_day_filled)
# Copy mydata to mydata_filled
mydata_filled <- mydata
# Replace "NA" with previously calculated mean value
mydata_filled$steps[is.na(mydata$steps)] <- mean(mydata$steps, na.rm = TRUE)
head(mydata_filled)
# recalulate total number of steps for each unique day with filled data
steps_by_day_filled <- mydata_filled %>% group_by(date) %>% summarise(steps_sum_filled = sum(steps, na.rm = TRUE))
# Plot Histogram of data
g <- ggplot(steps_by_day_filled, aes(steps_sum_filled))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median with filled data
# Round mean step count to nearest whole step
steps_mean_filled <- round(mean(steps_by_day_filled$steps_sum), digits = 0)
steps_median_filled <- median(steps_by_day_filled$steps_sum)
steps_mean_filled
steps_median_filled
steps_by_day_filled
?ggplot
steps_by_day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FALSE))
steps_by_day
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FAlse))
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FALSE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum), digits = 0)
steps_median <- median(steps_by_day$steps_sum)
steps_mean
steps_median
?mean
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FALSE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum, na.rm = TRUE), digits = 0)
steps_median <- median(steps_by_day$steps_sum, na.rm = TRUE)
?ggplot
?na.exclude
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FALSE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum), na.exclude(steps_by_day))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum, na.rm = TRUE), digits = 0)
steps_median <- median(steps_by_day$steps_sum, na.rm = TRUE)
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FALSE))
# Plot Histogram of data
g <- ggplot(steps_by_day, aes(steps_sum), na.omit(steps_by_day))
g + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum, na.rm = TRUE), digits = 0)
steps_median <- median(steps_by_day$steps_sum, na.rm = TRUE)
# calulate total number of steps for each unique day
steps_by_day <- mydata %>% group_by(date) %>% summarise(steps_sum = sum(steps, na.rm = FALSE))
# Plot Histogram of data
ggplot(steps_by_day, aes(steps_sum)) + geom_histogram(bins = 20) + xlab("Total Steps Per Day") + ylab("Frequency") + ggtitle("Histogram of Total Number of Steps Taken Per Day")
# Calculate mean and median
# Round mean step count to nearest whole step
steps_mean <- round(mean(steps_by_day$steps_sum, na.rm = TRUE), digits = 0)
steps_median <- median(steps_by_day$steps_sum, na.rm = TRUE)
